# Polling X App - Cursor Rules

## Project Overview
This is a full-stack polling application built with Next.js 15, TypeScript, Supabase, and Tailwind CSS. The app allows users to create polls, vote on them, view results, and manage their polls.

## Tech Stack
- **Frontend**: Next.js 15 with App Router, React 19, TypeScript
- **Styling**: Tailwind CSS with Shadcn/ui components
- **Backend**: Supabase (PostgreSQL database, authentication, real-time features)
- **Deployment**: Vercel
- **State Management**: React Context for auth state
- **Forms**: React Hook Form with Zod validation

## Architecture
- **Pages**: App Router structure with protected routes
- **Components**: Feature-based organization (auth/, polls/, create-poll/)
- **Data Flow**: Supabase client for database operations, localStorage fallback for development
- **Authentication**: Supabase Auth with email/password
- **Middleware**: Route protection and redirects

## Coding Standards
- Use TypeScript for all new code
- Follow React best practices and hooks
- Use Shadcn/ui components for consistent UI
- Implement proper error handling and loading states
- Write descriptive commit messages
- Use meaningful variable and function names

## File Structure
```
app/
  /auth/          # Authentication pages
  /polls/         # Poll listing and details
  /create-poll/   # Poll creation
  layout.tsx      # Root layout with auth provider
  page.tsx        # Home page with redirects

components/
  /ui/            # Shadcn/ui components
  /auth/          # Authentication components
  /polls/         # Poll-related components
  /create-poll/   # Poll creation components

lib/
  /supabase/      # Supabase client setup
  auth-context.tsx # Authentication context
  utils.ts        # Utility functions

middleware.ts     # Route protection
```

## Development Guidelines
1. **Authentication**: Always check user authentication before database operations
2. **Error Handling**: Use try-catch blocks and provide user-friendly error messages
3. **Loading States**: Show loading indicators during async operations
4. **Type Safety**: Define proper TypeScript interfaces for all data structures
5. **Performance**: Use React.memo for expensive components, optimize re-renders
6. **Accessibility**: Ensure components work with screen readers and keyboard navigation
7. **Security**: Never expose sensitive data in client-side code

## Database Schema
- **users**: Supabase auth.users table
- **polls**: { id, title, options, created_by, created_at }
- **votes**: { id, poll_id, user_id, option_index, voted_at }

## Common Patterns
- Use `useAuth()` hook for authentication state
- Use `createClient()` for Supabase operations
- Use Shadcn/ui components for consistent styling
- Handle loading and error states in components
- Use TypeScript interfaces for props and state

## Testing
- Test authentication flows
- Test poll creation and voting
- Test error scenarios
- Verify responsive design

## Deployment
- Environment variables must be set in Vercel
- Database migrations should be handled via Supabase
- Monitor performance and errors in Vercel dashboard

## AI Assistant Guidelines
When working on this project:
1. Always consider authentication and authorization
2. Use the established patterns and file structure
3. Ensure TypeScript types are properly defined
4. Follow React and Next.js best practices
5. Consider mobile responsiveness
6. Add proper error handling
7. Use Shadcn/ui components when possible
8. Keep code clean and well-documented
9. Test changes thoroughly before committing
10. Follow the existing code style and conventions
